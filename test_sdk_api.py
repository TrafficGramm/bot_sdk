from fastapi import FastAPI, Query
from pydantic import BaseModel, HttpUrl
from typing import List, Dict, Union, Literal
import random

app = FastAPI()


# –ú–æ–¥–µ–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
class Button(BaseModel):
    text: str
    url: HttpUrl


# NS –∏ OS
class AdBase(BaseModel):
    type: Literal["NS", "OS"]
    channels: Dict[str, HttpUrl]


# H
class AdH(BaseModel):
    type: Literal["H"]
    text: str
    media: List[HttpUrl]
    buttons: List[Button]


# –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
Ad = Union[AdBase, AdH]

H = [
    {
        "type": "H",
        "text": "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ IUDA BOT!",
        "media_type": "photo",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –≥–∏—Ñ, –∞–ª—å–±–æ–º
        "media": ["https://ibb.co/HfZWZxF9", "https://ibb.co/HfZWZxF9"],
        "buttons": [{"text": "üîì –ü–µ—Ä–µ–π—Ç–∏", "url": "https://example.com/bonus"}],
    }
]

OS_NS = [
    {
        "type": "NS",
        "channels": {
            "IUDA LAB": "https://t.me/iudalab",
            "Crypto Chat": "https://t.me/cryptochat",
        },
    },
    {"type": "OS", "channels": {"AI News": "https://t.me/ainews"}},
]


@app.get("/channels", response_model=List[Ad])
async def fetch_channels(
    user_id: int = Query(..., description="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
) -> List[Ad]:
    return random.choice([H, OS_NS])


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
class SubscriptionRequest(BaseModel):
    user_id: int
    channel_url: HttpUrl


@app.post("/is_subscribed")
async def is_subscribed(data: SubscriptionRequest):
    """
    –ú–æ–∫–∞–µ–º: –Ω–∞ IUDA LAB –ø–æ–¥–ø–∏—Å–∞–Ω —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ user_id —á—ë—Ç–Ω—ã–π.
    –ù–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –Ω–µ—Ç.
    """
    if data.channel_url == "https://t.me/iudalab":
        result = data.user_id % 2 == 0
    else:
        result = False
    return {"subscribed": result}
